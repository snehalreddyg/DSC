#include<stdio.h>
#include<stdlib.h>
#define n 50
char stack[n];
int top=-1,j=0;
char postfix[50];
void push (char);
char pop ();
int priority (char);
void main ()
{
  int i;
  char ch, element;
  char infix[50];
  printf ("\n enter infix expression");
  gets (infix);
  printf ("\n symbol\tstack content\t postfix expression");
  for (i = 0; infix[i] != NULL; i++)
    {
      ch = infix[i];
      if (ch >= 'a' && ch <= 'z')
	{
	  postfix[j] = ch;
	  j++;
	}
      else if (ch == '(')
	{
	  push (ch);
	}
      else if (ch == ')')
	{
	  while ((element = pop ()) != '(')
	    {
	      postfix[j] = element;
	      j++;
	    }
	}
      else
	{
	  while (priority (ch) <= priority (stack[top]))
	    {
	      if (stack[top] == '(')
		break;
	      element = pop ();
	      postfix[j] = element;
	      j++;
	    }
	  push (ch);
	}
      postfix[j] = NULL;
      printf ("\n %c\t%s\t\t%s", ch, stack, postfix);
    }
  while ((element = pop ()) != '(')
    {
      postfix[j] = element;
      j++;
    }
}

void
push (char ch)
{
  if (top >= n - 1)
    {
      printf ("\n overflow");
    }
  else
    {
      top = top + 1;
      stack[top] = ch;
    }
}

char pop ()
{
  char item;
  if (top == -1)
    {
      printf ("\n underflow");
      exit (0);
    }
  else
    {
      top = top - 1;
      item = stack[top + 1];
      stack[top + 1] = NULL;
    }
  return item;
}

int priority (char ch)
{
  char operand[6] = { '+', '-', '*', '/', '(', '\0' };
  int prio[5] = { 1, 1, 2, 2, 3 };
  int i, a;
  for (i = 0; i < 5; i++)
    {
      if (ch == operand[i])
	{
	  a = prio[i];
	  break;
	}
    }
  return a;
}